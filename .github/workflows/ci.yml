name: TGBot Workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest  # Для Ubuntu, но можно выбрать другие операционные системы

    steps:
      # Шаг 1: Проверяем исходный код из репозитория
      - name: Checkout code
        uses: actions/checkout@v2

      # Шаг 2: Установка зависимостей (если они есть)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y build-essential g++ make cmake libcurl4-openssl-dev libssl-dev libjsoncpp-dev git zlib1g-dev
          sudo apt-get install -y libboost-system-dev libboost-thread-dev libboost-program-options-dev libboost-test-dev
          sudo apt-get install -y libgtest-dev

      - name: Install tgbot-cpp
        run: |
          cd $HOME
          git clone --depth 1 https://github.com/reo7sp/tgbot-cpp.git
          cd tgbot-cpp
          cmake . -DCMAKE_INSTALL_PREFIX=$HOME/.local && make -j$(nproc) && make install

      # Шаг 3: Создаем директорию для сборки
      - name: Create build directory
        run: mkdir build

      # Шаг 4: Запуск CMake для конфигурации проекта
      - name: Configure project with CMake
        run: |
          cd build
          pwd
          cmake .. -DCMAKE_BUILD_TYPE=Release
          # Проверяем, что Makefile был создан
          tail -n 20 CMakeCache.txt  # Выводим последние 20 строк из CMakeCache.txt
          # Выводим содержимое директории для проверки наличия Makefile
          ls -l
          pwd

      # Шаг 5: Компиляция проекта
      - name: Build project
        run: |
          cd build
          pwd
          make all
          ls -l

      # Шаг 6: Запуск тестов (если они есть)
      - name: Run tests
        run: |
          cd build/Tests/UnitTests/
          ./Parser_Tests/parser_tests*
          ./Queue_Tests/queue_tests*
          ./SignalHandler_Tests/signalhandler_tests*
          #./ThreadSafeQueue_Tests/threadsafequeue_test*
